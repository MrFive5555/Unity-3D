# 游戏场景构建
在Camera中添加Component->Skybox，再将相应的Skybox图案添加上去,如图
![](http://imglf5.nosdn.127.net/img/SFdCQXBERFlWT1NacDMyVmYyYWg4QUMzU05UTjFFQjhpdEVnUGhqUVhmT1l1LzMvN2pXSHpnPT0.jpg?imageView&thumbnail=500x0&quality=96&stripmeta=0&type=jpg)

![](http://imglf4.nosdn.127.net/img/SFdCQXBERFlWT1NacDMyVmYyYWg4TnMwLzlGVkNpSUt6aEdYRXhFdnVPMjJMdlRtbWFwOTNRPT0.jpg?imageView&thumbnail=500x0&quality=96&stripmeta=0&type=jpg)
# 游戏对象使用的总结
 - 对可能会多次反复出现的对象（如各种角色和道具），可以做成预制，保存在Asset/Resource文件夹下，在需要时随时创建
 - 对象的各种属性（物理性质，材质等）可以通过添加对象的Componet实现
 - 可以写脚本控制对象的行为
 - 可以通过设置对象的Material来控制对象的外观
 - 可以通过设置对象的Transition来控制对象的位置和朝向

# 关于动作分离的实现

[视频地址](http://v.youku.com/v_show/id_XMzUyOTMxNDYyOA==.html?spm=a2hzp.8244740.0.0)

## UML图


![UML](https://github.com/MrFive5555/Unity-3D/blob/master/%E7%89%A7%E5%B8%88%E4%B8%8E%E9%AD%94%E9%AC%BC-%E5%8A%A8%E4%BD%9C%E5%88%86%E7%A6%BB.jpg?raw=true)

在架构中，每个动作都是一个Action，所有Action交给ActionManager管理，调用RunAction()方法进行管理。SequenceAction是Action的一个继承，用于把多个连续的动作合成一个Action。
在PAD_View.cs文件中定义了Action_BoatCross（过河）, Action_MoveTo（移动对象）, Action_Aboard（上船）, Action_Ashore（下船）等动作
每个动作结束之后都需要调用传入的Callback函数的call（）调用。
考虑到原来的代码是采用MVC架构编写的，我们把动作作为View的一部分
