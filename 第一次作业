# 1.简答题
解释 游戏对象（GameObjects） 和 资源（Assets）的区别与联系。
> GameObject是Unity中所有实体的基类
> Asset是游戏构建过程中所要用到的资源，如材质，预设，脚本等
> 资源可以作为Component被引入GameObject
---
下载几个游戏案例，分别总结资源、对象组织的结构（指资源的目录组织结构与游戏对象树的层次结构）
>资源一般采用文件树的结构
> - scene：存放生产的场景
> - prefab：存放预设
> - material：存放材质
> 对象也是树状的结构，父对象可以包含若干个子对象
---
 编写一个代码，使用 debug 语句来验证  [MonoBehaviour](https://docs.unity3d.com/ScriptReference/MonoBehaviour.html)  基本行为或事件触发的条件
    -   基本行为包括 Awake() Start() Update() FixedUpdate() LateUpdate()
    -   常用事件包括 OnGUI() OnDisable() OnEnable()
```c#
public class NewBehaviourScript : MonoBehaviour {  
	 void Start () {  
		 Debug.Log("Start");  
	 }  
	  
	 void Update () {  
		 Debug.Log("Update");  
	 }  
	  
	 private void Awake() {  
		 Debug.Log("Awake");  
	 }  
	  
	 private void FixedUpdate() {  
		 Debug.Log("FixedUpdate");   
	 }  
	  
	 private void LateUpdate() {  
		 Debug.Log("LateUpdate");   
	 }  
	  
	 private void OnGUI() {  
		 Debug.Log("OnGUI");  
	 }   
}
```
>awake在所有GameObject加载完后调用
> start会在所有awake执行完后调用
> update在每帧更新的时候调用
> FixedUpdate在每次出现物理变化的时候调用
> LateUpdate在所有update调用完后调用

查找脚本手册，了解  [GameObject](https://docs.unity3d.com/ScriptReference/GameObject.html)，Transform，Component 对象，分别翻译官方对三个对象的描述（Description）
> -   GameObjec是在 Unity 中代表任务，道具和场景的基础对象
> - Transform决定了场景中游戏对象的位置，大小和旋转关系。
> - Component是游戏对象和其对应行为之间的枢纽。

   -   描述下图中 table 对象（实体）的属性、table 的 Transform 的属性、 table 的部件
> - table的属性：Tag（ Untagged）、Layer（Default）
> ---
> Transform的属性
> -   Position: (0, 0, 0)
> -   Rotation: (0, 0, 0)
> -   Scale : (1, 1, 1)
>  --- 
>  table的部件
>  - Transform
>  - Cube
>  - Box Collider
>  - Mesh Renderer

   -   用 UML 图描述 三者的关系（请使用 UMLet 14.1.1 stand-alone版本出图）
![UML](https://github.com/MrFive5555/Unity-3D/blob/master/%E4%BD%9C%E4%B8%9A1-UML-v2.0.png?raw=true)
---

-   整理相关学习资料，编写简单代码验证以下技术的实现：
查找对象
```C#
//Finds a GameObject by name and returns it.  
GameObject.Find("Name");  
//Return a list of active GameObjects tagged tag.  
//Return empty array if no GameObject was found.  
GameObject.FindGameObjectsWithTag("TagName");  
//Return one active GameObject tagged tag.  
//Returns null if no GameObject was found.  
GameObject.FindWithTag("TagName");  
//Return the first active loaded object of Type type.  
GameObject.FindObjectOfType("TypeName");  
//Return a list of all active loaded objects of Type type.  
GameObject.FindObjectsOfType("TypeName");
//The returned child transform or null if no child is found.
Transfer.find("name")
```

添加子对象
 ```C#
 GameObject.CreatePrimitive(PrimitiveType);  
 ```
遍历对象树
 ```C#
private void travel(Transform root) {
     foreach (Transform child in root.transform) {
         Debug.Log(child.name);
         travel(child);
     }
 }
 //调用
travel(this.transform);
   ```
清除所有子对象
 ```C#
foreach(Transform child in transform) {  
     Destroy(child.gameObject);  
}
```
---
-   资源预设（Prefabs）与 对象克隆 (clone)
预设（Prefabs）有什么好处？
    >预设是一种资源。向场景添加一个预设时，就会创建它的一个实例。所以预设可以看作游戏对象的模板。当对预设作出任何更改时，这些更改将应用于所有与之链接的实例。
    
预设与对象克隆 (clone or copy or Instantiate of Unity Object) 关系？
> 对象克隆，就是 clone 或者 copy 了一个原本对象的实例，二者之间没有相互影响。

---

制作 table 预制，写一段代码将 table 预制资源实例化成游戏对象
```c#
public class NewBehaviourScript : MonoBehaviour {  
	private string prePath = "prefabs/table";  
	// Use this for initialization  
	void Start () {  
		GameObject Table =  
		Instantiate(Resource.Load(prePath), new Vector(4, 0, 0), Quaternion.identity) as GameObject;  
	}  
}
```
---

尝试解释组合模式（Composite Pattern / 一种设计模式）。
组合模式是把某些具体功能封装成一个个的组件，当某个对象需要用到这些功能式，只需要把这些组件组合到对象里，便可以使用这些功能。这种设计方法称为组合模式。

---
使用 BroadcastMessage() 方法向子对象发送消息
> 父类对象：
```C#
public class ParentBehaviourScript : MonoBehaviour {  
	// Use this for initialization  
	void Start () {  
		this.BroadcastMessage("Broadcast");  
	}  
}  
```

> 子类对象：
```C#
public class ChildBehaviourScript : MonoBehaviour {  
	void Broadcast() {  
		Debug.Log("Child Received");  
	}  
}
```

# 编程题
见同一个仓库
